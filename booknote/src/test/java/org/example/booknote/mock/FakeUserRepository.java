package org.example.booknote.mock;

import org.example.booknote.common.domain.exception.ResourceNotFoundException;
import org.example.booknote.user.domain.User;
import org.example.booknote.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> users = Collections.synchronizedList(new ArrayList<>());

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findById(long id) {
        return users.stream().filter(item -> item.id().equals(id)).findAny();
    }

    @Override
    public User save(User user) {
        if(user.id()==null || user.id() == 0){
            User newUser=new User(
                    autoGeneratedId.incrementAndGet(),
                    user.email(),
                    user.name(),
                    user.picture(),
                    user.createAt(),
                    user.updateAt()
            );
            users.add(newUser);
            return newUser;
        }

        users.removeIf(item->item.id().equals(user.id()));
        users.add(user);
        return user;
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return users.stream().filter(item -> item.email().equals(email)).findAny();
    }
}
