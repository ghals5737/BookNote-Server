package org.example.booknote.mock;

import org.example.booknote.book.domain.Book;
import org.example.booknote.book.service.port.BookRepository;
import org.example.booknote.common.domain.exception.ResourceNotFoundException;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBookRepository implements BookRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Book> books = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Book save(Book book) {
        if (book.id() == null || book.id() == 0) {
            Book newBook = new Book(
                    autoGeneratedId.incrementAndGet(),
                    book.title(),
                    book.user(),
                    book.isPinned(),
                    book.createAt(),
                    book.updateAt()
            );
            books.add(newBook);
            return newBook;
        }

        books.removeIf(item -> item.id().equals(book.id()));
        books.add(book);
        return book;
    }

    @Override
    public Book getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Memos", id));
    }

    @Override
    public Optional<Book> findById(long id) {
        return books.stream().filter(item -> item.id().equals(id)).findAny();
    }

    @Override
    public List<Book> findByUserId(long userId) {
        return books.stream().filter(book -> book.user().id().equals(userId)).toList();
    }

    @Override
    public void deleteById(long id) {

    }
}
