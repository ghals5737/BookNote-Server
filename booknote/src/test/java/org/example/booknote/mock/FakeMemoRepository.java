package org.example.booknote.mock;

import org.example.booknote.memo.domain.Memo;
import org.example.booknote.memo.service.port.MemoRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMemoRepository implements MemoRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Memo> memos = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Memo save(Memo memo) {
        if(memo.id()==null || memo.id()==0){
            Memo newMemo=new Memo(
                    autoGeneratedId.incrementAndGet(),
                    memo.book(),
                    memo.title(),
                    memo.content(),
                    memo.createAt(),
                    memo.updateAt()
            );
            memos.add(newMemo);
            return newMemo;
        }
        memos.removeIf(item -> item.id().equals(memo.id()));
        memos.add(memo);
        return memo;
    }

    @Override
    public Optional<Memo> findById(long id) {
        return memos.stream().filter(item -> item.id().equals(id)).findFirst();
    }

    @Override
    public List<Memo> findByBookId(long bookId) {
        return memos.stream().filter(memo -> memo.book().equals(bookId)).toList();
    }

    @Override
    public void deleteById(long id) {

    }
}
